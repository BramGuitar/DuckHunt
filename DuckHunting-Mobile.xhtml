<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Duck Hunting PWA</title>
  <link rel="manifest" href="manifest.json" />
  <link rel="icon" type="image/png" href="icon-192.png" />
  <link rel="apple-touch-icon" href="icon-192.png" />
  <meta name="theme-color" content="#4a90e2" />
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background-color: #cceeff;
      overflow: hidden;
    }

    #game-screen, #start-screen, #end-screen {
      position: absolute;
      width: 100%;
      height: 100%;
      display: none;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      text-align: center;
    }

    #start-screen, #end-screen {
      display: flex;
      background-color: #cceeff;
    }

    #crosshair {
      position: absolute;
      width: 40px;
      height: 40px;
      pointer-events: none;
      background: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="40" height="40"%3E%3Ccircle cx="20" cy="20" r="18" stroke="red" stroke-width="2" fill="none"/%3E%3Cline x1="20" y1="0" x2="20" y2="40" stroke="red" stroke-width="2"/%3E%3Cline x1="0" y1="20" x2="40" y2="20" stroke="red" stroke-width="2"/%3E%3C/svg%3E') no-repeat center center;
      background-size: contain;
    }

    #duck {
      position: absolute;
      font-size: 40px;
      cursor: pointer;
    }

    #scoreboard, #timer {
      position: absolute;
      top: 10px;
      font-size: 20px;
      background: rgba(255,255,255,0.7);
      padding: 6px 10px;
      border-radius: 6px;
    }

    #scoreboard { left: 10px; }
    #timer { right: 10px; }

    #bomb-message {
      position: absolute;
      top: 60px;
      left: 10px;
      font-size: 18px;
      background: rgba(255,0,0,0.7);
      color: #fff;
      padding: 6px 10px;
      border-radius: 6px;
      display: none;
    }

    button {
      padding: 12px 24px;
      font-size: 18px;
      margin-top: 20px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="start-screen">
    <h1>ü¶Ü Duck Hunting</h1>
    <button onclick="startGame()">Start Game</button>
  </div>

  <div id="game-screen">
    <div id="scoreboard">Score: 0</div>
    <div id="timer">Tijd: 30</div>
    <div id="bomb-message">üí£ Bom gebruikt! +5 punten</div>
    <div id="duck">ü¶Ü</div>
    <div id="crosshair"></div>
  </div>

  <div id="end-screen">
    <h1>Game Over</h1>
    <p id="final-score"></p>
    <h2>üèÜ Ranglijst</h2>
    <ol id="leaderboard"></ol>
    <button onclick="startGame()">Opnieuw spelen</button>
  </div>

  <script>
    let score = 0;
    const timeLimit = 30;
    let timeLeft = timeLimit;
    let bombUsed = false;
    let gameTimer, timerInterval;

    const duck = document.getElementById("duck");
    const crosshair = document.getElementById("crosshair");
    const scoreboard = document.getElementById("scoreboard");
    const bombMsg = document.getElementById("bomb-message");
    const timerDisplay = document.getElementById("timer");
    const startScreen = document.getElementById("start-screen");
    const gameScreen = document.getElementById("game-screen");
    const endScreen = document.getElementById("end-screen");
    const finalScore = document.getElementById("final-score");
    const leaderboard = document.getElementById("leaderboard");

    function moveDuck() {
      const maxWidth = window.innerWidth - 50;
      const maxHeight = window.innerHeight - 50;
      duck.style.left = Math.floor(Math.random() * maxWidth) + "px";
      duck.style.top = Math.floor(Math.random() * maxHeight) + "px";
    }

    function updateLeaderboard() {
      let scores = JSON.parse(localStorage.getItem("duckhunt-scores") || "[]");
      scores.push(score);
      scores.sort((a, b) => b - a);
      scores = scores.slice(0, 5);
      localStorage.setItem("duckhunt-scores", JSON.stringify(scores));

      leaderboard.innerHTML = "";
      for (let s of scores) {
        const li = document.createElement("li");
        li.textContent = s;
        leaderboard.appendChild(li);
      }
    }

    function startGame() {
      score = 0;
      bombUsed = false;
      timeLeft = timeLimit;

      scoreboard.textContent = "Score: 0";
      timerDisplay.textContent = "Tijd: " + timeLeft;
      bombMsg.style.display = "none";

      startScreen.style.display = "none";
      endScreen.style.display = "none";
      gameScreen.style.display = "block";

      moveDuck();

      gameTimer = setTimeout(endGame, timeLimit * 1000);
      timerInterval = setInterval(() => {
        timeLeft--;
        timerDisplay.textContent = "Tijd: " + timeLeft;
        if (timeLeft <= 0) clearInterval(timerInterval);
      }, 1000);
    }

    function endGame() {
      clearTimeout(gameTimer);
      clearInterval(timerInterval);
      finalScore.textContent = "Je eindscore: " + score;
      updateLeaderboard();
      gameScreen.style.display = "none";
      endScreen.style.display = "flex";
    }

    duck.onclick = () => {
      score++;
      scoreboard.textContent = "Score: " + score;
      moveDuck();
    };

    document.onclick = e => {
      crosshair.style.left = (e.clientX - 20) + "px";
      crosshair.style.top = (e.clientY - 20) + "px";
    };

    document.addEventListener("keydown", e => {
      if (e.key === " " && !bombUsed) {
        score += 5;
        bombUsed = true;
        scoreboard.textContent = "Score: " + score;
        moveDuck();
        bombMsg.style.display = "block";
        setTimeout(() => {
          bombMsg.style.display = "none";
        }, 3000);
      }
    });

    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js').then(() => {
        console.log("‚úÖ Service Worker actief");
      });
    }
  </script>
</body>
</html>
