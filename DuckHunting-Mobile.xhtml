<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Duck Hunting PWA</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="manifest" href="manifest.json"/>
  <link rel="icon" type="image/png" href="icon-192.png"/>
  <link rel="apple-touch-icon" href="icon-192.png"/>
  <meta name="theme-color" content="#4a90e2"/>
  <style type="text/css">
    body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      background-color: #cceeff;
      overflow: hidden;
    }

    #game-screen, #start-screen, #end-screen {
      position: absolute;
      width: 100%;
      height: 100%;
      display: none;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      text-align: center;
    }

    #start-screen, #end-screen {
      display: flex;
      background-color: #cceeff;
    }

    #crosshair {
      position: absolute;
      width: 40px;
      height: 40px;
      pointer-events: none;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40"><circle cx="20" cy="20" r="18" stroke="red" stroke-width="2" fill="none"/><line x1="20" y1="0" x2="20" y2="40" stroke="red" stroke-width="2"/><line x1="0" y1="20" x2="40" y2="20" stroke="red" stroke-width="2"/></svg>') no-repeat center center;
      background-size: contain;
    }

    #duck {
      position: absolute;
      font-size: 40px;
      cursor: pointer;
    }

    #scoreboard {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 24px;
      background: rgba(255,255,255,0.7);
      padding: 8px 12px;
      border-radius: 8px;
    }

    button {
      padding: 12px 24px;
      font-size: 18px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div id="start-screen">
    <h1>ü¶Ü Duck Hunting</h1>
    <button onclick="startGame()">Start Game</button>
  </div>

  <div id="game-screen">
    <div id="scoreboard">Score: 0</div>
    <div id="duck">ü¶Ü</div>
    <div id="crosshair"></div>
  </div>

  <div id="end-screen">
    <h1>Game Over</h1>
    <p id="final-score"></p>
    <h2>üèÜ Ranglijst</h2>
    <ol id="leaderboard"></ol>
    <button onclick="startGame()">Opnieuw spelen</button>
  </div>

  <script type="text/javascript">
    var score = 0;
    var timeLimit = 30;
    var duck = document.getElementById("duck");
    var crosshair = document.getElementById("crosshair");
    var scoreboard = document.getElementById("scoreboard");
    var startScreen = document.getElementById("start-screen");
    var gameScreen = document.getElementById("game-screen");
    var endScreen = document.getElementById("end-screen");
    var finalScore = document.getElementById("final-score");
    var leaderboard = document.getElementById("leaderboard");
    var bombUsed = false;
    var gameTimer;

    function moveDuck() {
      var maxWidth = window.innerWidth - 50;
      var maxHeight = window.innerHeight - 50;
      duck.style.left = Math.floor(Math.random() * maxWidth) + "px";
      duck.style.top = Math.floor(Math.random() * maxHeight) + "px";
    }

    function updateLeaderboard() {
      var scores = JSON.parse(localStorage.getItem("duckhunt-scores") || "[]");
      scores.push(score);
      scores.sort(function(a, b) { return b - a; });
      scores = scores.slice(0, 5); // top 5
      localStorage.setItem("duckhunt-scores", JSON.stringify(scores));

      leaderboard.innerHTML = "";
      for (var i = 0; i < scores.length; i++) {
        var li = document.createElement("li");
        li.textContent = scores[i];
        leaderboard.appendChild(li);
      }
    }

    function startGame() {
      score = 0;
      bombUsed = false;
      scoreboard.textContent = "Score: 0";
      startScreen.style.display = "none";
      endScreen.style.display = "none";
      gameScreen.style.display = "block";
      moveDuck();
      gameTimer = setTimeout(endGame, timeLimit * 1000);
    }

    function endGame() {
      clearTimeout(gameTimer);
      finalScore.textContent = "Je eindscore: " + score;
      updateLeaderboard();
      gameScreen.style.display = "none";
      endScreen.style.display = "flex";
    }

    duck.onclick = function () {
      score++;
      scoreboard.textContent = "Score: " + score;
      moveDuck();
    };

    document.onclick = function (e) {
      crosshair.style.left = (e.clientX - 20) + "px";
      crosshair.style.top = (e.clientY - 20) + "px";
    };

    document.addEventListener("keydown", function (e) {
      if (e.key === " " && !bombUsed) {
        // bom activeert
        score += 5;
        scoreboard.textContent = "Score: " + score;
        bombUsed = true;
        moveDuck();
        alert("üí• Bom gebruikt! +5 punten");
      }
    });

    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js').then(function(reg) {
        console.log("Service Worker geregistreerd!");
      });
    }
  </script>
</body>
</html>
