<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="nl">
<head>
  <title>Duck Hunting Game (PWA)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="manifest" href="manifest.json"/>
  <style type="text/css">
    body {
      margin: 0; padding: 0;
      font-family: sans-serif;
      background-color: #a3d9ff;
      overflow: hidden;
      cursor: crosshair;
    }
    @media (max-width: 600px) {
      body { cursor: auto; }
      .duck { font-size: 30px !important; }
      #scoreboard, #timer, #highscore { font-size: 14px !important; padding: 6px; }
      button { font-size: 14px !important; padding: 8px 12px !important; }
    }
    #scoreboard, #timer, #highscore {
      position: absolute; top: 10px;
      font-size: 18px;
      background: #fff; opacity: 0.9;
      padding: 10px; border-radius: 10px; z-index: 10;
    }
    #scoreboard { left: 10px; }
    #timer { left: 120px; }
    #highscore { left: 230px; }
    #bombButton, #soundToggle {
      position: absolute; top: 10px;
      font-size: 16px;
      padding: 10px 16px;
      border: none; border-radius: 8px;
      cursor: pointer; z-index: 10;
    }
    #bombButton { right: 10px; background: #ff4444; color: #fff; }
    #soundToggle { right: 110px; background: #44aa44; color: #fff; }
    .duck {
      position: absolute;
      font-size: 40px;
      cursor: pointer;
      animation: flap 0.4s infinite alternate ease-in-out;
      user-select: none;
    }
    @keyframes flap {
      from { transform: translateY(0); }
      to { transform: translateY(-12px); }
    }
    #gameover, #startscreen {
      position: absolute;
      top: 50%; left: 50%;
      width: 90%; max-width: 340px;
      transform: translate(-50%, -50%);
      background: #fff; padding: 30px;
      border-radius: 15px;
      text-align: center;
      font-size: 20px;
      display: none;
      z-index: 20;
    }
    .button {
      margin-top: 10px;
      font-size: 18px;
      padding: 10px 20px;
    }
    select {
      margin-top: 10px;
      font-size: 16px;
      padding: 6px;
    }
    ul {
      list-style: none;
      padding: 0;
      font-size: 16px;
      text-align: left;
    }
    li span {
      float: right;
    }
  </style>
</head>
<body>
  <div id="scoreboard">Score: 0</div>
  <div id="timer">Tijd: 30</div>
  <div id="highscore">Highscore: 0</div>
  <button id="bombButton" onclick="useBomb()">💣 Bomb</button>
  <button id="soundToggle" onclick="toggleSound()">🔊 Aan</button>

  <div id="startscreen">
    <p><strong>Duck Hunting Game</strong></p>
    <p>Klik of tik op de eenden voor punten!</p>
    <label>Naam:</label><br/>
    <input type="text" id="playerName" placeholder="Jouw naam" /><br/><br/>
    <label>Moeilijkheid:</label><br/>
    <select id="difficulty">
      <option value="easy">Beginner</option>
      <option value="normal" selected="selected">Normaal</option>
      <option value="hard">Expert</option>
    </select><br/>
    <button class="button" onclick="startGame()">Start</button>
  </div>

  <div id="gameover">
    <div id="finalscore">Je score: 0</div>
    <div><strong>Top 5:</strong></div>
    <ul id="leaderboard"></ul>
    <button class="button" onclick="restartGame()">Opnieuw spelen</button>
  </div>

  <audio id="shot" preload="auto">
    <source src="https://www.soundjay.com/mechanical/switch-click-10.mp3" type="audio/mpeg"/>
  </audio>
  <audio id="boom" preload="auto">
    <source src="https://www.soundjay.com/explosion/explosion-01.mp3" type="audio/mpeg"/>
  </audio>

  <script type="text/javascript">
    var score = 0, timeLeft = 30, gameRunning = false;
    var duckSpeed = 2000, ducks = [], duckMoveInterval, timerInterval;
    var duckID = 0, soundOn = true, bombAvailable = true;
    var leaderboard = [];
    var lastTimeDuckHit = 0;
    var timeDuckCooldown = 15000;

    function get(id) { return document.getElementById(id); }

    function startGame() {
      get('startscreen').style.display = 'none';
      document.body.style.cursor = 'crosshair';
      var level = get('difficulty').value;
      bombAvailable = true;
      get('bombButton').style.display = 'inline';

      if (level === 'easy') { duckSpeed = 2500; timeLeft = 40; }
      else if (level === 'normal') { duckSpeed = 2000; timeLeft = 30; }
      else if (level === 'hard') { duckSpeed = 1300; timeLeft = 25; bombAvailable = false; get('bombButton').style.display = 'none'; }

      resetGame();
      gameRunning = true;
      moveAllDucks();
      timerInterval = setInterval(updateTimer, 1000);
      duckMoveInterval = setInterval(moveAllDucks, duckSpeed);
    }

    function resetGame() {
      score = 0; duckID = 0;
      ducks.forEach(d => d.parentNode && d.parentNode.removeChild(d));
      ducks = [];
      get('scoreboard').textContent = 'Score: 0';
      get('timer').textContent = 'Tijd: ' + timeLeft;
      addDuck();
      updateHighscore();
    }

    function updateScore() {
      get('scoreboard').textContent = 'Score: ' + score;
    }

    function updateHighscore() {
      var stored = localStorage.getItem('duckLeaderboard');
      if (stored) leaderboard = JSON.parse(stored);
      var max = Math.max(0, ...leaderboard.map(e => e.score));
      get('highscore').textContent = 'Highscore: ' + max;
    }

    function updateTimer() {
      if (!gameRunning) return;
      timeLeft--;
      get('timer').textContent = 'Tijd: ' + timeLeft;
      if (timeLeft <= 0) endGame();
    }

    function endGame() {
      gameRunning = false;
      clearInterval(timerInterval);
      clearInterval(duckMoveInterval);
      get('finalscore').textContent = 'Je score: ' + score;
      saveScore(score);
      showLeaderboard();
      get('gameover').style.display = 'block';
    }

    function restartGame() {
      get('gameover').style.display = 'none';
      startGame();
    }

    function addDuck() {
      var duck = document.createElement('div');
      duck.className = 'duck';
      let duckType = '🦆';
      var now = Date.now();
      var hasClockDuck = ducks.some(d => d.textContent === '⏱️');
      if (!hasClockDuck && now - lastTimeDuckHit > timeDuckCooldown) {
        duckType = '⏱️';
      }
      duck.textContent = duckType;
      duck.setAttribute('id', 'duck' + duckID);
      positionDuck(duck);

      duck.onclick = function (e) {
        if (!gameRunning) return false;
        if (duck.textContent === '⏱️') {
          timeLeft += 3;
          lastTimeDuckHit = Date.now();
          get('timer').textContent = 'Tijd: ' + timeLeft;
          duck.remove();
        } else {
          score++;
          updateScore();
          if (soundOn) get('shot').play();
        }
        positionDuck(duck);
        adjustDifficulty();
        e.stopPropagation();
        return false;
      };

      duck.ontouchstart = duck.onclick;
      document.body.appendChild(duck);
      ducks.push(duck);
      duckID++;
    }

    function positionDuck(duck) {
      var w = window.innerWidth;
      var h = window.innerHeight;
      duck.style.left = Math.floor(Math.random() * (w - 60)) + 'px';
      duck.style.top = Math.floor(Math.random() * (h - 60)) + 'px';
    }

    function moveAllDucks() {
      if (!gameRunning) return;
      ducks.forEach(positionDuck);
    }

    function adjustDifficulty() {
      if (score % 5 === 0 && duckSpeed > 700) {
        duckSpeed -= 150;
        clearInterval(duckMoveInterval);
        duckMoveInterval = setInterval(moveAllDucks, duckSpeed);
      }
      if (score % 7 === 0 && ducks.length < 10) {
        addDuck();
      }
    }

    function useBomb() {
      if (!gameRunning || !bombAvailable) return;
      ducks.forEach(d => d.parentNode && d.parentNode.removeChild(d));
      ducks = [];
      score += 3;
      updateScore();
      if (soundOn) get('boom').play();
      addDuck();
      bombAvailable = false;
      get('bombButton').style.display = 'none';
    }

    function toggleSound() {
      soundOn = !soundOn;
      get('soundToggle').textContent = soundOn ? '🔊 Aan' : '🔇 Uit';
    }

    function saveScore(s) {
      var name = get('playerName').value || "Anoniem";
      leaderboard.push({ name: name, score: s, time: new Date().toLocaleString() });
      leaderboard.sort((a, b) => b.score - a.score);
      leaderboard = leaderboard.slice(0, 5);
      localStorage.setItem('duckLeaderboard', JSON.stringify(leaderboard));
    }

    function showLeaderboard() {
      var ul = get('leaderboard');
      ul.innerHTML = '';
      leaderboard.forEach(entry => {
        var li = document.createElement('li');
        li.textContent = entry.name + ' (' + entry.time + '): ';
        var span = document.createElement('span');
        span.textContent = entry.score;
        li.appendChild(span);
        ul.appendChild(li);
      });
    }

    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js').then(reg => {
          console.log('ServiceWorker geregistreerd met scope: ', reg.scope);
        }, err => {
          console.log('ServiceWorker registratie mislukt: ', err);
        });
      });
    }

    window.onload = function () {
      updateHighscore();
      get('startscreen').style.display = 'block';
    };
  </script>
</body>
</html>
