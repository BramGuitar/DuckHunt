<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="nl">
<head>
  <title>Duck Hunting Game (XHTML)</title>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style type="text/css">
    body {
      margin: 0; padding: 0;
      font-family: sans-serif;
      background-color: #a3d9ff;
      overflow: hidden;
      cursor: crosshair;
    }
    @media (max-width: 600px) {
      body { cursor: auto; }
      .duck { font-size: 30px !important; }
      #scoreboard, #timer, #highscore { font-size: 14px !important; padding: 6px; }
      button { font-size: 14px !important; padding: 8px 12px !important; }
    }
    #scoreboard, #timer, #highscore {
      position: absolute; top: 10px;
      font-size: 18px;
      background: #ffffff; opacity: 0.9;
      padding: 10px; border-radius: 10px; z-index: 10;
    }
    #scoreboard { left: 10px; }
    #timer { left: 120px; }
    #highscore { left: 230px; }

    #bombButton {
      position: absolute; top: 10px; right: 10px;
      font-size: 16px; padding: 10px 16px;
      border: none; border-radius: 8px;
      cursor: pointer; z-index: 10;
      background: #ff4444; color: #ffffff;
    }

    .duck {
      position: absolute;
      font-size: 40px;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      animation: flap 0.4s infinite alternate ease-in-out;
    }
    @keyframes flap {
      from { transform: translateY(0); }
      to { transform: translateY(-12px); }
    }

    #gameover, #startscreen {
      position: absolute;
      top: 50%; left: 50%;
      width: 90%; max-width: 340px;
      transform: translate(-50%, -50%);
      background: #ffffff; padding: 30px;
      border-radius: 15px;
      text-align: center;
      font-size: 18px;
      display: none;
      z-index: 20;
      box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }
    .button {
      margin-top: 10px;
      font-size: 18px;
      padding: 10px 20px;
      border: none; border-radius: 10px;
      background: #4a90e2; color: #ffffff;
      cursor: pointer;
    }
    select, input[type="text"] {
      margin-top: 10px;
      font-size: 16px;
      padding: 6px;
      width: 100%;
      box-sizing: border-box;
    }
    ul {
      list-style: none;
      padding: 0;
      font-size: 16px;
      text-align: left;
    }
    li span {
      float: right;
    }
  </style>
</head>
<body>
  <div id="scoreboard">Score: 0</div>
  <div id="timer">Tijd: 30</div>
  <div id="highscore">Highscore: 0</div>
  <button id="bombButton" onclick="useBomb()">💣 Bomb</button>

  <div id="startscreen">
    <p><strong>Duck Hunting Game</strong></p>
    <p>Klik of tik op de eenden voor punten!</p>
    <label for="playername">Spelernaam:</label><br />
    <input type="text" id="playername" placeholder="Naam invoeren" /><br />
    <label for="difficulty">Moeilijkheid:</label><br />
    <select id="difficulty">
      <option value="easy">Beginner</option>
      <option value="normal" selected="selected">Normaal</option>
      <option value="hard">Expert</option>
    </select><br />
    <button class="button" onclick="startGame()">Start</button>
  </div>

  <div id="gameover">
    <div id="finalscore">Je score: 0</div>
    <div><strong>Top 5:</strong></div>
    <ul id="leaderboard"></ul>
    <button class="button" onclick="restartGame()">Opnieuw spelen</button>
  </div>

  <script type="text/javascript">
  // <![CDATA[
    // Globale status
    var score = 0;
    var timeLeft = 30;
    var gameRunning = false;

    var duckSpeed = 2000;
    var ducks = [];
    var duckMoveInterval = null;
    var timerInterval = null;

    var duckID = 0;
    var bombAvailable = true;

    var leaderboard = [];

    // Timer-eend cooldown (15s)
    var lastTimeDuckHit = 0;
    var timeDuckCooldown = 15000; // ms

    function get(id) { return document.getElementById(id); }

    function showStart() {
      get('startscreen').style.display = 'block';
      get('gameover').style.display = 'none';
      document.body.style.cursor = 'auto';
      get('bombButton').style.display = 'none';
      score = 0;
      timeLeft = 30;
      updateScore();
      updateTimerLabel();
      updateHighscore();
      // Ruim eventuele eenden op
      for (var i = 0; i < ducks.length; i++) {
        var d = ducks[i];
        if (d && d.parentNode) { d.parentNode.removeChild(d); }
      }
      ducks = [];
    }

    function startGame() {
      var name = get('playername').value;
      if (!name || /^\s*$/.test(name)) {
        alert('Vul je naam in om te starten.');
        return;
      }

      var level = get('difficulty').value;
      bombAvailable = true;
      get('bombButton').style.display = 'inline';

      if (level === 'easy') { duckSpeed = 2500; timeLeft = 40; }
      else if (level === 'normal') { duckSpeed = 2000; timeLeft = 30; }
      else { // hard
        duckSpeed = 1300; timeLeft = 25; bombAvailable = false; get('bombButton').style.display = 'none';
      }

      // Reset
      score = 0;
      updateScore();
      updateTimerLabel();
      document.body.style.cursor = 'crosshair';

      // Schermen
      get('startscreen').style.display = 'none';
      get('gameover').style.display = 'none';

      // Verwijder oude eenden
      for (var i = 0; i < ducks.length; i++) {
        var d = ducks[i];
        if (d && d.parentNode) { d.parentNode.removeChild(d); }
      }
      ducks = [];
      duckID = 0;

      // Start
      gameRunning = true;
      addDuck();
      moveAllDucks();

      if (timerInterval) { clearInterval(timerInterval); }
      if (duckMoveInterval) { clearInterval(duckMoveInterval); }

      timerInterval = setInterval(updateTimer, 1000);
      duckMoveInterval = setInterval(moveAllDucks, duckSpeed);
    }

    function restartGame() {
      get('gameover').style.display = 'none';
      get('startscreen').style.display = 'block';
      document.body.style.cursor = 'auto';
    }

    function updateScore() {
      get('scoreboard').textContent = 'Score: ' + score;
    }

    function updateTimerLabel() {
      get('timer').textContent = 'Tijd: ' + timeLeft;
    }

    function updateHighscore() {
      var stored = localStorage.getItem('duckLeaderboard');
      if (stored) {
        try { leaderboard = JSON.parse(stored); }
        catch (e) { leaderboard = []; }
      } else {
        leaderboard = [];
      }
      var max = 0;
      for (var i = 0; i < leaderboard.length; i++) {
        if (leaderboard[i].score > max) { max = leaderboard[i].score; }
      }
      get('highscore').textContent = 'Highscore: ' + max;
    }

    function updateTimer() {
      if (!gameRunning) { return; }
      timeLeft = timeLeft - 1;
      updateTimerLabel();
      if (timeLeft <= 0) { endGame(); }
    }

    function endGame() {
      gameRunning = false;
      if (timerInterval) { clearInterval(timerInterval); timerInterval = null; }
      if (duckMoveInterval) { clearInterval(duckMoveInterval); duckMoveInterval = null; }
      get('finalscore').textContent = 'Je score: ' + score;
      saveScore(score);
      showLeaderboard();
      get('gameover').style.display = 'block';
      document.body.style.cursor = 'auto';
    }

    function positionDuck(duck) {
      var w = window.innerWidth;
      var h = window.innerHeight;
      var x = Math.floor(Math.random() * (w - 60));
      var y = Math.floor(Math.random() * (h - 60));
      duck.style.left = String(x) + 'px';
      duck.style.top = String(y) + 'px';
    }

    function addDuck() {
      var duck = document.createElement('div');
      duck.className = 'duck';

      // 25% kans op ⏱️, maar alleen als cooldown voorbij is
      var canSpawnTimerDuck = (new Date().getTime() - lastTimeDuckHit) > timeDuckCooldown;
      var isTimerDuck = (Math.random() < 0.25) && canSpawnTimerDuck;

      duck.appendChild(document.createTextNode(isTimerDuck ? '⏱️' : '🦆'));
      duck.setAttribute('id', 'duck' + duckID);
      positionDuck(duck);

      duck.onclick = function (e) {
        if (!gameRunning) { return false; }

        if (duck.textContent === '⏱️') {
          timeLeft = timeLeft + 3;
          updateTimerLabel();
          lastTimeDuckHit = new Date().getTime();
        } else {
          score = score + 1;
          updateScore();
        }

        positionDuck(duck);
        adjustDifficulty();
        if (e && e.stopPropagation) { e.stopPropagation(); }
        return false;
      };
      // Touch-ondersteuning
      duck.ontouchstart = duck.onclick;

      document.body.appendChild(duck);
      ducks.push(duck);
      duckID = duckID + 1;
    }

    function moveAllDucks() {
      if (!gameRunning) { return; }
      for (var i = 0; i < ducks.length; i++) {
        positionDuck(ducks[i]);
      }
    }

    function adjustDifficulty() {
      // Sneller bewegen per 5 punten
      if (score > 0 && (score % 5) === 0 && duckSpeed > 700) {
        duckSpeed = duckSpeed - 150;
        if (duckMoveInterval) { clearInterval(duckMoveInterval); }
        duckMoveInterval = setInterval(moveAllDucks, duckSpeed);
      }
      // Extra eend per 7 punten (max 10)
      if (score > 0 && (score % 7) === 0 && ducks.length < 10) {
        addDuck();
      }
    }

    function useBomb() {
      if (!gameRunning || !bombAvailable) { return; }
      // Verwijder alle eenden
      for (var i = 0; i < ducks.length; i++) {
        var d = ducks[i];
        if (d && d.parentNode) { d.parentNode.removeChild(d); }
      }
      ducks = [];
      // Bonuspunten
      score = score + 3;
      updateScore();
      // Voeg precies één eend terug
      addDuck();
      bombAvailable = false;
      get('bombButton').style.display = 'none';
    }

    function saveScore(s) {
      var name = get('playername').value;
      if (!name || /^\s*$/.test(name)) { name = 'Speler'; }

      // Lees bestaande
      var stored = localStorage.getItem('duckLeaderboard');
      var list = [];
      if (stored) {
        try { list = JSON.parse(stored); }
        catch (e) { list = []; }
      }

      list.push({
        name: name,
        score: s,
        time: new Date().toLocaleString()
      });

      // Sorteer en top 5
      list.sort(function(a, b) { return b.score - a.score; });
      if (list.length > 5) { list = list.slice(0, 5); }

      localStorage.setItem('duckLeaderboard', JSON.stringify(list));
      leaderboard = list;
      updateHighscore();
    }

    function showLeaderboard() {
      var ul = document.getElementById('leaderboard');
      ul.innerHTML = '';
      for (var i = 0; i < leaderboard.length; i++) {
        var entry = leaderboard[i];
        var li = document.createElement('li');
        li.appendChild(document.createTextNode(entry.name + ' (' + entry.time + '): '));
        var span = document.createElement('span');
        span.appendChild(document.createTextNode(String(entry.score)));
        li.appendChild(span);
        ul.appendChild(li);
      }
    }

    // Startscherm bij laden
    window.onload = function () {
      showStart();
    };
  // ]]>
  </script>
</body>
</html>
