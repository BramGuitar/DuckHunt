<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="nl" lang="nl">
<head>
  <title>Klok Eend Spel</title>
  <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
  <style type="text/css">
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #87CEEB;
      overflow: hidden;
      text-align: center;
    }
    canvas {
      display: block;
      margin: auto;
      background: #cceeff;
      border: 2px solid #333;
    }
    #overlay, #gameOverScreen {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      background: rgba(0,0,0,0.7);
      color: white;
      font-size: 24px;
      z-index: 10;
    }
    button {
      margin-top: 20px;
      padding: 12px 24px;
      font-size: 20px;
      border: none;
      border-radius: 8px;
      background: #4CAF50;
      color: white;
      cursor: pointer;
    }
    #levelUp {
      position: absolute;
      top: 20%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 40px;
      font-weight: bold;
      color: yellow;
      text-shadow: 2px 2px 5px black;
      display: none;
      animation: fade 2s ease-out;
    }
    @keyframes fade {
      0% { opacity: 1; }
      100% { opacity: 0; }
    }
    #achievements {
      position: absolute;
      bottom: 10px;
      left: 10px;
      background: rgba(0,0,0,0.6);
      color: white;
      padding: 10px;
      border-radius: 10px;
      font-size: 14px;
      text-align: left;
      max-width: 200px;
    }
    #leaderboard {
      margin-top: 20px;
      font-size: 18px;
      text-align: left;
      max-width: 300px;
    }
    #leaderboard h2 {
      margin-bottom: 5px;
      font-size: 22px;
    }
    #leaderboard ol {
      margin: 0;
      padding-left: 20px;
    }
  </style>
</head>
<body>
  <div id="overlay">
    <h1>Welkom bij Klok Eend ü¶Ü</h1>
    <p>Schiet zoveel mogelijk eenden!<br />Let op de speciale eenden voor verrassingen.</p>
    <button onclick="startGame()">Start spel</button>
    <div id="leaderboard"></div>
  </div>

  <div id="gameOverScreen" style="display:none;">
    <h1>Game Over!</h1>
    <p id="finalScore"></p>
    <button onclick="restartGame()">Opnieuw spelen</button>
    <div id="leaderboard"></div>
  </div>

  <div id="levelUp">Level Up! üöÄ</div>
  <div id="achievements"></div>
  <canvas id="gameCanvas" width="800" height="500"></canvas>

  <script type="text/javascript">
// --- volledige JS zoals eerder (ongewijzigd behalve XHTML compat) ---
/* Ik laat de JS intact; XHTML accepteert gewone <script type="text/javascript"> 
   zolang de inhoud geldig JS is. */
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let gameRunning = false;
let ducks = [];
let score = 0;
let level = 1;
let achievements = [];
let duckSpeed = 2;
let clockCooldown = 0;
let chainHits = 0;
let clockHits = 0;

class Duck {
  constructor(type="normal") {
    this.x = -50;
    this.y = Math.random() * (canvas.height - 50);
    this.speed = duckSpeed + Math.random() * 2;
    this.type = type; // normal, clock, green, blue, red
  }
  draw() {
    ctx.beginPath();
    if (this.type === "clock") {
      ctx.fillStyle = "gold";
      ctx.arc(this.x, this.y, 20, 0, Math.PI*2);
      ctx.fill();
      ctx.fillStyle = "black";
      ctx.fillText("‚è∞", this.x-10, this.y+5);
    } else if (this.type === "green") {
      ctx.fillStyle = "limegreen";
      ctx.fillRect(this.x-15, this.y-10, 30, 20);
    } else if (this.type === "blue") {
      ctx.fillStyle = "blue";
      ctx.fillRect(this.x-15, this.y-10, 30, 20);
    } else if (this.type === "red") {
      ctx.fillStyle = "red";
      ctx.fillRect(this.x-15, this.y-10, 30, 20);
    } else {
      ctx.fillStyle = "brown";
      ctx.fillRect(this.x-15, this.y-10, 30, 20);
    }
    ctx.closePath();
  }
  update() {
    this.x += this.speed;
  }
}

function spawnDuck() {
  const chance = Math.random();
  if (clockCooldown <= 0 && chance < 0.05) {
    ducks.push(new Duck("clock"));
    clockCooldown = 45 * 60; // 45 sec bij 60fps
  } else if (chance < 0.1) {
    ducks.push(new Duck("green"));
  } else if (chance < 0.15) {
    ducks.push(new Duck("blue"));
  } else if (chance < 0.2) {
    ducks.push(new Duck("red"));
  } else {
    ducks.push(new Duck("normal"));
  }
}

function checkLevelUp() {
  if (score >= 10 && level === 1) nextLevel();
  else if (score >= 20 && level === 2) nextLevel();
  else if (score >= 40 && level === 3) nextLevel();
}

function nextLevel() {
  level++;
  duckSpeed += 1;
  showLevelUp();
}

function showLevelUp() {
  const levelUpDiv = document.getElementById("levelUp");
  levelUpDiv.style.display = "block";
  setTimeout(function(){ levelUpDiv.style.display = "none"; }, 2000);
}

function addAchievement(name) {
  if (!achievements.includes(name)) {
    achievements.push(name);
    document.getElementById("achievements").innerHTML += "üèÜ " + name + "<br />";
  }
}

canvas.addEventListener("click", function(e) {
  const rect = canvas.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;

  ducks.forEach(function(duck, i) {
    if (mouseX > duck.x-20 && mouseX < duck.x+20 && mouseY > duck.y-20 && mouseY < duck.y+20) {
      if (duck.type === "clock") {
        score += 5;
        clockHits++;
        if (clockHits >= 3) addAchievement("Tijdbonus");
      } else if (duck.type === "green") {
        score += 2;
      } else if (duck.type === "blue") {
        duckSpeed = Math.max(1, duckSpeed - 1);
      } else if (duck.type === "red") {
        score -= 3;
      } else {
        score++;
        chainHits++;
        if (chainHits >= 5) addAchievement("Scherpschutter");
      }
      ducks.splice(i, 1);
    }
  });
});

function update() {
  if (!gameRunning) return;
  ctx.clearRect(0,0,canvas.width,canvas.height);

  if (Math.random() < 0.02) spawnDuck();
  ducks.forEach(function(duck) {
    duck.update();
    duck.draw();
  });

  ctx.fillStyle = "black";
  ctx.font = "20px Arial";
  ctx.fillText("Score: " + score, 10, 20);
  ctx.fillText("Level: " + level, 10, 40);

  ducks = ducks.filter(function(d){ return d.x < canvas.width + 50; });

  if (clockCooldown > 0) clockCooldown--;

  checkLevelUp();

  if (score >= 50) {
    endGame();
  } else {
    requestAnimationFrame(update);
  }
}

function startGame() {
  document.getElementById("overlay").style.display = "none";
  document.getElementById("gameOverScreen").style.display = "none";
  gameRunning = true;
  score = 0;
  level = 1;
  achievements = [];
  document.getElementById("achievements").innerHTML = "";
  duckSpeed = 2;
  ducks = [];
  update();
}

function endGame() {
  gameRunning = false;
  saveScore(score);
  document.getElementById("finalScore").innerText = "Je eindscore: " + score;
  showLeaderboard();
  document.getElementById("gameOverScreen").style.display = "flex";
}

function restartGame() {
  startGame();
}

// Leaderboard functies
function saveScore(newScore) {
  let scores = JSON.parse(localStorage.getItem("leaderboard")) || [];
  scores.push(newScore);
  scores.sort(function(a,b){ return b-a; });
  scores = scores.slice(0,5); // top 5
  localStorage.setItem("leaderboard", JSON.stringify(scores));
}

function showLeaderboard() {
  let scores = JSON.parse(localStorage.getItem("leaderboard")) || [];
  let html = "<h2>Leaderboard</h2><ol>";
  scores.forEach(function(s) {
    html += "<li>" + s + " punten</li>";
  });
  html += "</ol>";
  var els = document.querySelectorAll("#leaderboard");
  els.forEach(function(el){ el.innerHTML = html; });
}

showLeaderboard();
  </script>
</body>
</html>
